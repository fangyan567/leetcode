/*
 * @lc app=leetcode.cn id=22 lang=cpp
 *
 * [22] 括号生成
 */

// @lc code=start
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        string path;
        dfs(res, path, 0, 0, n);
        return res;
    }

    void dfs(vector<string> &res, string path, int left, int right, int n)
    {
        if (path.size() == n * 2) 
        {
            res.push_back(path);
            return;
        }

        if (left < n)
        {
            path.push_back('(');
            dfs(res, path, left + 1, right, n);
            path.pop_back();
        }

        if (right < left)
        {
            path.push_back(')');
            dfs(res, path, left, right + 1, n);
            path.pop_back();
        }
        return;
    }
};
// @lc code=end

