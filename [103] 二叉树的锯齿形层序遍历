/*
 * @lc app=leetcode.cn id=103 lang=cpp
 *
 * [103] 二叉树的锯齿形层序遍历
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if (!root) return res;

        queue<TreeNode *> d;
        d.push(root);
        bool flag= true;
       
        while (!d.empty())
        {
            int n = d.size();
            vector<int> vec;
            
            for (int i = 0; i < n; i++)
            {
                TreeNode *p = d.front();
                d.pop_front();

                vec.push_back(p->val);
                if (flag)
                {
                   if (p->left) d.push_front(p->left);
                   if (p->right) d.push_front(p->right);
                }
                else
                {
                    if (p->left) d.push_back(p->left);
                   if (p->right) d.push_back(p->right);
                } 
            }
            res.push_back(vec);
            flag = !flag;
        }
        return res;
    }
};
// @lc code=end

