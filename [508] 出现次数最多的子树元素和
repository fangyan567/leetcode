/*
 * @lc app=leetcode.cn id=508 lang=cpp
 *
 * [508] 出现次数最多的子树元素和
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        unordered_map<int, int> cnt;
        int maxCnt = 0;
        dfs(root, cnt, maxCnt);
        vector<int> res;
        for (auto &[k, v] : cnt)
        {
            if (v == maxCnt) 
            {
                res.push_back(k);
            }
        }
        return res;
    }

    int dfs(TreeNode *root,  unordered_map<int, int> &cnt, int &maxCnt)
    {
        if (!root) return 0;

        int sum = root->val + dfs(root->left, cnt, maxCnt) + dfs(root->right, cnt, maxCnt);
        maxCnt = max(maxCnt, ++cnt[sum]);
        return sum;
    }
};
// @lc code=end

