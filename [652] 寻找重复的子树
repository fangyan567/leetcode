/*
 * @lc app=leetcode.cn id=652 lang=cpp
 *
 * [652] 寻找重复的子树
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, int> m;
        vector<TreeNode *> res;

        helper(root, m, res);
        return res;
    }

    string helper(TreeNode* root, unordered_map<string, int> &m, vector<TreeNode *> &res)
    {
        if (!root) return "#";
        string path = to_string(root->val) + "," + helper(root->left, m, res) + "," + helper(root->right, m, res) ;
        if (m[path] == 1) res.push_back(root);
        
        ++m[path];
        return path;
    }
};
// @lc code=end

