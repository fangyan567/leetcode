/*
 * @lc app=leetcode.cn id=152 lang=cpp
 *
 * [152] 乘积最大子数组
 */

// @lc code=start
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(2, 0));

        dp[0][0] = nums[0];
        dp[0][1] = nums[0];
        for (int i = 1; i < n; i++)
        {
            if (nums[i] >= 0)
            {
                dp[i][1] = max(dp[i - 1][1] * nums[i], nums[i]);
                dp[i][0] = min(dp[i - 1][0] * nums[i], nums[i]);
            }
            else
            {
                dp[i][1] = max(dp[i - 1][0] * nums[i], nums[i]);
                dp[i][0] = min(dp[i - 1][1] * nums[i], nums[i]);
            }
        }

        int res = dp[0][1];
        for (int i = 1; i < n; i++)
        {
            res = max(res, dp[i][1]);
        }
        return res;
    }
};
// @lc code=end

