/*
 * @lc app=leetcode.cn id=515 lang=cpp
 *
 * [515] 在每个树行中找最大值
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> res;
        if (!root) return res;
        dfs(root, 0, res);
        return res;
    }

    void dfs(TreeNode* root, int height, vector<int> &res)
    {
        if (!root) return;

        if (height == res.size())
        {
            res.push_back(root->val);
        }
        else
        {
            res[height] = max(res[height], root->val);
        }

        dfs(root->left, height + 1, res);
        dfs(root->right, height + 1, res);
        return;
    }
};
// @lc code=end

