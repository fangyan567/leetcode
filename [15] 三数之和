/*
 * @lc app=leetcode.cn id=15 lang=cpp
 *
 * [15] 三数之和
 */

// @lc code=start
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        int n = nums.size();
        if (n <= 2) return res;

        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i++)
        {
            if (nums[i] > 0) return res;
            if (i > 0 && nums[i] == nums[i - 1])
            {
                continue;
            }
            
            int k = n - 1, j = i + 1;
            int target = - nums[i];
            
            while (j < k)
            {
                if (nums[j] +  nums[k] == target) 
                {
                    res.push_back(vector<int>{nums[i], nums[j], nums[k]});
                   //res.push_back({nums[i], nums[j], nums[k]});
                    ++j;
                    --k;

                    while (j < k && nums[j] == nums[j - 1]) ++j;
                    while (j < k && nums[k] == nums[k +1]) --k;
                } 
                else if (nums[j] + nums[k] > target) --k;
                else ++j;
            }
        }
        return res;
    }
};
// @lc code=end

