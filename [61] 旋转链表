/*
 * @lc app=leetcode.cn id=61 lang=cpp
 *
 * [61] 旋转链表
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (k == 0 || !head || !head->next) return head;

        int len = 0;
        ListNode *cur = head;
        while (cur)
        {
            len++;
            cur = cur->next;
        }
        cur = head;
        int n = len - k % len;
        ListNode *pre = nullptr;
        for (int i = 0; i < n; i++)
        {
            pre = cur;
            cur  = cur->next;
        }

        pre->next = nullptr;
        pre = cur;
        while (cur)
        {
            pre = cur;
            cur = cur->next;
        }
        pre->next = head;
        return pre;
        

    }
};
// @lc code=end

